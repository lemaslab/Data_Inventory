---
title: "mom-baby ehr-sodh"
author: "Dominick Lemas"
date: "9/29/2020"
output: html_document

---

```{r, include=FALSE}
##-------------- 
# **************************************************************************** #
# ***************                Project Overview              *************** #
# **************************************************************************** #

# Author:      Dominick Lemas
# Date:        Sept 29, 2020 
# Modify:      Feb 10, 2020
# IRB:         UFHealth Early Life Exposures and Pediatric Outcomes (IRB201601899) 

# version: R version 4.0.2 (2020-06-22)
# version: Rstudio version Version 1.3.959 

# **************************************************************************** #
# ***************                Description                   *************** #
# **************************************************************************** #

# PLAN: Access redcap via API and pull/format/clean data for downstream analysis.
# Note: vpn must be active

```


```{r, message=FALSE}

# **************************************************************************** #
# ***************                Library                       *************** #
# **************************************************************************** #

library(keyringr)
library(tidyverse)
library(redcapAPI)
library(REDCapR)
library(dplyr)
```

```{r, message=FALSE}
# Windows
source("~/mombaby-ehr-SDoH/code/utils.R")
api_token=get_API_token("redcap_ehr")
```

```{r}
#Windows users with spaces in file path
api_token <- decrypt_dpapi_pw("C:\\Users\\'Claire Layton'\\DPAPI\\passwords\\DESKTOP-OEIJUDH\\redcap_ehr.txt")
print(api_token)

```

```{r, message=FALSE}
# Mac, you need to store your API code in your keychain first
# api_token <- decrypt_kc_pw("redcap_ehr")
```

```{r, message=FALSE}
# API and URL
uri='https://redcap.ctsi.ufl.edu/redcap/api/'
rcon <- redcapConnection(url=uri, token=api_token)

# variables of interest
desired_fields_v1=c("part_id", "baby_race", "baby_ethnicity",   
                    "baby_dob", "baby_birth_wt_gr", "delivery_mode", 
                    "baby_gest_age", "baby_gender", "mom_id2", 
                    "mom_age_delivery", "payer", "baby_zip_code", 
                    "part_id2", "mom_baby_link_complete", 
                    "mom_race_link", "mom_ethnicity_link", "delivery_mode",
                    "mom_age_delivery", "payer", "baby_zipcode9", "baby_nicu_los", 
                    "mom_prenat_wt_lb_link", "mom_prenat_ht_inch_link")


# records of interest
desired_records_v1=c("Baby-0001", "Baby-0002", "Baby-0003",
                     "Baby-0004", "Baby-0005", "Baby-0006",
                     "Baby-0007", "Baby-0008", "Baby-0009",
                     "Baby-0010", "Baby-0011", "Baby-0012",
                     "Baby-0013", "Baby-0014", "Baby-0015",
                     "Baby-0016", "Baby-0017", "Baby-0018",
                     "Baby-0019", "Baby-0020", "Baby-0021",
                     "Baby-0022", "Baby-0023", "Baby-0024",
                     "Baby-0025", "Baby-0026", "Baby-0027",
                     "Baby-0028", "Baby-0029", "Baby-0030",
                     "Baby-0031", "Baby-0032", "Baby-0033",
                     "Baby-0034", "Baby-0035", "Baby-0036",
                     "Baby-0037", "Baby-0038", "Baby-0039",
                     "Baby-0040", "Baby-0041", "Baby-0042",
                     "Baby-0043", "Baby-0044", "Baby-0045",
                     "Baby-0046", "Baby-0047", "Baby-0048",
                     "Baby-0049", "Baby-0050", "Baby-0051",
                     "Baby-0052", "Baby-0053", "Baby-0054",
                     "Baby-0055", "Baby-0056", "Baby-0057",
                     "Baby-0058", "Baby-0059", "Baby-0060",
                     "Baby-0061", "Baby-0062", "Baby-0063",
                     "Baby-0064", "Baby-0065", "Baby-0066",
                     "Baby-0067", "Baby-0068", "Baby-0069",
                     "Baby-0070", "Baby-0071", "Baby-0072",
                     "Baby-0073", "Baby-0074", "Baby-0075",
                     "Baby-0076", "Baby-0077", "Baby-0078",
                     "Baby-0079", "Baby-0080", "Baby-0081",
                     "Baby-0082", "Baby-0083", "Baby-0084",
                     "Baby-0085", "Baby-0086", "Baby-0087",
                     "Baby-0088", "Baby-0089", "Baby-0090",
                     "Baby-0091", "Baby-0092", "Baby-0093",
                     "Baby-0094", "Baby-0095", "Baby-0096",
                     "Baby-0097", "Baby-0098", "Baby-0099",
                     "Baby-0100", "Baby-0101", "Baby-0102",
                     "Baby-0103", "Baby-0104", "Baby-0105",
                     "Baby-0106", "Baby-0107", "Baby-0108",
                     "Baby-0109", "Baby-0110", "Baby-0111",
                     "Baby-0112", "Baby-0113", "Baby-0114",
                     "Baby-0115", "Baby-0116", "Baby-0117",
                     "Baby-0118", "Baby-0119", "Baby-0120",
                     "Baby-0121", "Baby-0122", "Baby-0123",
                     "Baby-0124", "Baby-0125", "Baby-0126",
                     "Baby-0127", "Baby-0128", "Baby-0129",
                     "Baby-0130", "Baby-0131", "Baby-0132",
                     "Baby-0133", "Baby-0134", "Baby-0135",
                     "Baby-0136", "Baby-0137", "Baby-0138",
                     "Baby-0139", "Baby-0140", "Baby-0141",
                     "Baby-0142", "Baby-0143", "Baby-0144",
                     "Baby-0145", "Baby-0146", "Baby-0147",
                     "Baby-0148", "Baby-0149")

# Access data
data = redcap_read_oneshot(
  uri,
  api_token,
  fields = desired_fields_v1,
  #records = desired_records_v1,
  raw_or_label_headers = "label")$data

data = data %>%
  as_tibble()

#Get initial counts of babies and moms before any kind of subsetting
counts_unique_baby_ids = ddply(data,  .(part_id), nrow)
#16,711 unique babies and 13,856 unique moms

# Save the data in your local laptop (Github path: /data)
save(list=c("data"),file="~/mombaby-ehr-SDoH/data/raw/data.RData")
```



############################################
############################################
#Code for retrieving number of visits per baby (up to 10)

```{r}
#NOTE: This code takes a few minutes to run but only needs to be run once. It creates a file in your local laptop.
#Code to isolate babies that were seen in the health system multiple times
desired_events_visits10 = c("visit_1_arm_1", "visit_2_arm_1", "visit_3_arm_1", "visit_4_arm_1", 
                            "visit_5_arm_1", "visit_6_arm_1", "visit_7_arm_1", "visit_8_arm_1",
                            "visit_9_arm_1", "visit_10_arm_1")

#subset to fields that are dates
desired_fields_visits10 = c("part_id", "mom_id2", "baby_immune_date", "baby_obs_date", "baby_med_date", 
                            "baby_med_ip_date", "baby_asthma_date", "baby_fa_date", 
                            "baby_ear_infect_date", "baby_eczema_date", "baby_sebaceous_date", "baby_hemangioma_date",
                            "baby_obesity_date", "baby_asthma_hosp_date", "baby_derm_hosp_date",
                            "baby_ear_hosp_date", "baby_eczema_hosp_date", "baby_fa_hosp_date",
                            "baby_hemang_hosp_date", "baby_sebaceous_hosp_date", "baby_obesity_hosp_date",
                            "baby_erythema_hosp_date")

# Identify visit dates to sort out babies with repeat appointments in the health system
data_for_health_service_inclusion=redcap_read_oneshot(
  uri,
  api_token,
  events = desired_events_visits10,
  fields = desired_fields_visits10,
  #records = desired_records_v1,
  raw_or_label_headers = "raw")$data

data_for_health_service_inclusion = data_for_health_service_inclusion %>%
  as_tibble()

#Get list of baby ids
baby_ids <- as.list(unique(data_for_health_service_inclusion$part_id))
data_for_health_service_inclusion = data_for_health_service_inclusion %>%
  filter(str_detect(part_id, "Baby"))
  

#Set up matrix and index for for loop
counts_of_visits <- matrix(0, ncol = 1, nrow = length(baby_ids), byrow = T)
index = 1
for(i in baby_ids) {
  baby_i_subset = data_for_health_service_inclusion %>% filter(data_for_health_service_inclusion$part_id == i)
  event_names = as.list(unique(baby_i_subset$redcap_event_name))
  
  counts_of_visits[index, 1] <- length(event_names)
  #print(length(event_names))
  index = index + 1
}

#cbind baby ids with visits per baby
counts_of_visits <- data.frame(counts_of_visits)
baby_ids <- as.data.frame(do.call(rbind, baby_ids)) 
visits_per_baby <- cbind(baby_ids, counts_of_visits)
names(visits_per_baby) <- c("baby_ids", "number_of_visits")

visits_per_baby = visits_per_baby %>%
  as_tibble()

filter(str_detect(part_id, "Baby")) %>%

visits_per_baby = subset()
length(unique(id_data$part_id[str_detect(id_data$part_id, "Baby")]))
#Save the data in your local laptop (Github path: /data)
save(list=c("visits_per_baby"),file="~/mombaby-ehr-SDoH/data/raw/visits_per_baby.RData")
```

###############################
###############################
```{r}
#Claire's Work In Progress Importing Baby Well Visits
desired_fields_v1=c("part_id", "baby_race", "baby_ethnicity",   
                    "baby_dob", "baby_birth_wt_gr", "delivery_mode", 
                    "baby_gest_age", "baby_gender", "mom_id2", 
                    "mom_age_delivery", "payer", "baby_zip_code", 
                    "part_id2", "mom_baby_link_complete", 
                    "mom_race_link", "mom_ethnicity_link", "delivery_mode",
                    "mom_age_delivery", "payer", "baby_zipcode9", "baby_nicu_los", "days2_baby_wellvisit", "baby_obs_date")
            
# Access data
data=redcap_read_oneshot(
  uri,
  api_token,
  fields = desired_fields_v1,
  #records = desired_records_v1,
  raw_or_label_headers = "label")$data

data=data %>%
  as_tibble()

ddply(data,  .(part_id), summarise,  mean_birth_weights = mean(baby_birth_wt_gr))
wellvisit_count = ddply(data,  .(part_id,'Repeat Instrument' == baby_wellvisit), nrow)
wellvisit_count = data %>% 
  group_by(part_id, 'Repeat Instrument') %>% 
  summarise(n = n())
wellvisit_count <- ddply(data, .(part_id, 'Repeat Instrument'), summarise, 
                   Count = sum(days2_baby_wellvisit != NA))
```

